
DROP TABLE boleta CASCADE CONSTRAINTS;

DROP TABLE estado_mesa CASCADE CONSTRAINTS;

DROP TABLE estado_orden CASCADE CONSTRAINTS;

DROP TABLE estado_reserva CASCADE CONSTRAINTS;

DROP TABLE informe_rendimiento CASCADE CONSTRAINTS;

DROP TABLE marca_producto CASCADE CONSTRAINTS;

DROP TABLE mesas CASCADE CONSTRAINTS;

DROP TABLE mesasporreserva CASCADE CONSTRAINTS;

DROP TABLE orden CASCADE CONSTRAINTS;

DROP TABLE pedido_producto CASCADE CONSTRAINTS;

DROP TABLE pedido_proveedor CASCADE CONSTRAINTS;

DROP TABLE plato CASCADE CONSTRAINTS;

DROP TABLE platos_orden CASCADE CONSTRAINTS;

DROP TABLE productos CASCADE CONSTRAINTS;

DROP TABLE productos_receta CASCADE CONSTRAINTS;

DROP TABLE proveedor CASCADE CONSTRAINTS;

DROP TABLE receta CASCADE CONSTRAINTS;

DROP TABLE reserva CASCADE CONSTRAINTS;

DROP TABLE unidad_medida CASCADE CONSTRAINTS;

DROP TABLE utilidad_diarias CASCADE CONSTRAINTS;

DROP TABLE utilidad_mensual CASCADE CONSTRAINTS;

CREATE TABLE boleta (
    id_boleta       NUMBER(10) NOT NULL,
    mesas_id_mesa   NUMBER(3) NOT NULL,
    total_boleta    NUMBER(6) NOT NULL,
    fecha_boleta    DATE NOT NULL
);

ALTER TABLE boleta ADD CONSTRAINT boleta_pk PRIMARY KEY ( id_boleta );

CREATE TABLE estado_mesa (
    id_est_mesa      NUMBER(1) NOT NULL,
    desc_estd_mesa   NVARCHAR2(25) NOT NULL
);

ALTER TABLE estado_mesa ADD CONSTRAINT estado_mesa_pk PRIMARY KEY ( id_est_mesa );

CREATE TABLE estado_orden (
    id_est_ord    NUMBER(1) NOT NULL,
    desc_estado   NVARCHAR2(1) NOT NULL
);

ALTER TABLE estado_orden ADD CONSTRAINT estado_orden_pk PRIMARY KEY ( id_est_ord );

CREATE TABLE estado_reserva (
    id_est_reserva      NUMBER(1) NOT NULL,
    desc_estd_reserva   NVARCHAR2(25) NOT NULL
);

ALTER TABLE estado_reserva ADD CONSTRAINT estado_reserva_pk PRIMARY KEY ( id_est_reserva );

CREATE TABLE informe_rendimiento 
    
    -- No Columns 
;

CREATE TABLE marca_producto (
    id_marca   NUMBER(5) NOT NULL,
    marca      NVARCHAR2(25) NOT NULL
);

ALTER TABLE marca_producto ADD CONSTRAINT marca_producto_pk PRIMARY KEY ( id_marca );

CREATE TABLE mesas (
    id_mesa                   NUMBER(3) NOT NULL,
    capacidad                 NUMBER(2) NOT NULL,
    estado_mesa_id_est_mesa   NUMBER(1) NOT NULL
);

ALTER TABLE mesas ADD CONSTRAINT mesas_pk PRIMARY KEY ( id_mesa );

CREATE TABLE mesasporreserva (
    mesas_id_mesa        NUMBER(3) NOT NULL,
    reserva_id_reserva   NUMBER(10) NOT NULL
);

ALTER TABLE mesasporreserva ADD CONSTRAINT mesasporreserva_pk PRIMARY KEY ( mesas_id_mesa,
                                                                            reserva_id_reserva );

CREATE TABLE orden (
    id_orden                  NUMBER(10) NOT NULL,
    boleta_id_boleta          NUMBER(10) NOT NULL,
    hora_inicio               TIMESTAMP WITH LOCAL TIME ZONE NOT NULL,
    hora_term                 TIMESTAMP WITH LOCAL TIME ZONE NOT NULL,
    estado_orden_id_est_ord   NUMBER(1) NOT NULL
);

ALTER TABLE orden ADD CONSTRAINT orden_pk PRIMARY KEY ( id_orden );

CREATE TABLE pedido_producto (
    pedido_proveedor_id_pedido   NUMBER(10) NOT NULL,
    productos_id_producto        NUMBER(4) NOT NULL,
    cantidad                     NUMBER(4,2) NOT NULL
);

ALTER TABLE pedido_producto ADD CONSTRAINT pedido_producto_pk PRIMARY KEY ( pedido_proveedor_id_pedido,
                                                                            productos_id_producto );

CREATE TABLE pedido_proveedor (
    proveedor_id_proveedor   NUMBER(2) NOT NULL,
    id_pedido                NUMBER(10) NOT NULL,
    fecha_pedido             DATE NOT NULL,
    fecha_entrega            DATE NOT NULL
);

ALTER TABLE pedido_proveedor ADD CONSTRAINT pedido_proveedor_pk PRIMARY KEY ( id_pedido );

CREATE TABLE plato (
    id_plato           NUMBER(4) NOT NULL,
    receta_id_receta   NUMBER(4) NOT NULL,
    nombre_plato       NVARCHAR2(50) NOT NULL,
    img_plato          BLOB NOT NULL,
    precio_plato       NUMBER(6) NOT NULL
);

CREATE UNIQUE INDEX plato__idx ON
    plato (
        receta_id_receta
    ASC );

ALTER TABLE plato ADD CONSTRAINT plato_pk PRIMARY KEY ( id_plato );

CREATE TABLE platos_orden (
    plato_id_plato   NUMBER(4) NOT NULL,
    orden_id_orden   NUMBER(10) NOT NULL,
    cantidad_plato   NUMBER(2) NOT NULL
);

ALTER TABLE platos_orden ADD CONSTRAINT platos_orden_pk PRIMARY KEY ( plato_id_plato,
                                                                      orden_id_orden );

CREATE TABLE productos (
    id_producto               NUMBER(4) NOT NULL,
    nom_producto              VARCHAR2(50) NOT NULL,
    proveedor_id_proveedor    NUMBER(2) NOT NULL,
    stock                     NUMBER NOT NULL,
    marca_producto_id_marca   NUMBER(5) NOT NULL,
    unidad_medida_id_unidad   NUMBER(1) NOT NULL
);

ALTER TABLE productos ADD CONSTRAINT productos_pk PRIMARY KEY ( id_producto );

CREATE TABLE productos_receta (
    productos_id_producto   NUMBER(4) NOT NULL,
    receta_id_receta        NUMBER(4) NOT NULL,
    cantidad                NUMBER(3,2) NOT NULL
);

ALTER TABLE productos_receta ADD CONSTRAINT productos_receta_pk PRIMARY KEY ( productos_id_producto,
                                                                              receta_id_receta );

CREATE TABLE proveedor (
    id_proveedor       NUMBER(2) NOT NULL,
    nombre_proveedor   NVARCHAR2(100) NOT NULL
);

ALTER TABLE proveedor ADD CONSTRAINT proveedor_pk PRIMARY KEY ( id_proveedor );

CREATE TABLE receta (
    plato_id_plato   NUMBER(4) NOT NULL,
    id_receta        NUMBER(4) NOT NULL,
    instrucciones    VARCHAR2(3000) NOT NULL
);

CREATE UNIQUE INDEX receta__idx ON
    receta (
        plato_id_plato
    ASC );

ALTER TABLE receta ADD CONSTRAINT receta_pk PRIMARY KEY ( id_receta );

CREATE TABLE reserva (
    id_reserva                      NUMBER(10) NOT NULL,
    estado_reserva_id_est_reserva   NUMBER(1) NOT NULL,
    rut_reserva                     NVARCHAR2(12) NOT NULL,
    fecha_reserva                   DATE NOT NULL,
    email                           VARCHAR2(50),
    telefono_reserva                VARCHAR2(12) NOT NULL,
    cantidad_personas_reserva       NUMBER(2) NOT NULL,
    mesas_id_mesa                   NUMBER(3) NOT NULL
);

ALTER TABLE reserva ADD CONSTRAINT reserva_pk PRIMARY KEY ( id_reserva );

CREATE TABLE unidad_medida (
    id_unidad     NUMBER(1) NOT NULL,
    desc_unidad   NVARCHAR2(15) NOT NULL
);

ALTER TABLE unidad_medida ADD CONSTRAINT unidad_medida_pk PRIMARY KEY ( id_unidad );

CREATE TABLE utilidad_diarias 
    
    -- No Columns 
;

CREATE TABLE utilidad_mensual 
    
    -- No Columns 
;

ALTER TABLE boleta
    ADD CONSTRAINT boleta_mesas_fk FOREIGN KEY ( mesas_id_mesa )
        REFERENCES mesas ( id_mesa );

ALTER TABLE mesas
    ADD CONSTRAINT mesas_estado_mesa_fk FOREIGN KEY ( estado_mesa_id_est_mesa )
        REFERENCES estado_mesa ( id_est_mesa );

ALTER TABLE mesasporreserva
    ADD CONSTRAINT mesasporreserva_mesas_fk FOREIGN KEY ( mesas_id_mesa )
        REFERENCES mesas ( id_mesa );

ALTER TABLE mesasporreserva
    ADD CONSTRAINT mesasporreserva_reserva_fk FOREIGN KEY ( reserva_id_reserva )
        REFERENCES reserva ( id_reserva );

ALTER TABLE orden
    ADD CONSTRAINT orden_boleta_fk FOREIGN KEY ( boleta_id_boleta )
        REFERENCES boleta ( id_boleta );

ALTER TABLE orden
    ADD CONSTRAINT orden_estado_orden_fk FOREIGN KEY ( estado_orden_id_est_ord )
        REFERENCES estado_orden ( id_est_ord );

--  ERROR: FK name length exceeds maximum allowed length(30) 
ALTER TABLE pedido_producto
    ADD CONSTRAINT pedido_producto_pedido_proveedor_fk FOREIGN KEY ( pedido_proveedor_id_pedido )
        REFERENCES pedido_proveedor ( id_pedido );

ALTER TABLE pedido_producto
    ADD CONSTRAINT pedido_producto_productos_fk FOREIGN KEY ( productos_id_producto )
        REFERENCES productos ( id_producto );

ALTER TABLE pedido_proveedor
    ADD CONSTRAINT pedido_proveedor_proveedor_fk FOREIGN KEY ( proveedor_id_proveedor )
        REFERENCES proveedor ( id_proveedor );

ALTER TABLE platos_orden
    ADD CONSTRAINT platos_orden_orden_fk FOREIGN KEY ( orden_id_orden )
        REFERENCES orden ( id_orden );

ALTER TABLE platos_orden
    ADD CONSTRAINT platos_orden_plato_fk FOREIGN KEY ( plato_id_plato )
        REFERENCES plato ( id_plato );

ALTER TABLE productos
    ADD CONSTRAINT productos_marca_producto_fk FOREIGN KEY ( marca_producto_id_marca )
        REFERENCES marca_producto ( id_marca );

ALTER TABLE productos
    ADD CONSTRAINT productos_proveedor_fk FOREIGN KEY ( proveedor_id_proveedor )
        REFERENCES proveedor ( id_proveedor );

ALTER TABLE productos_receta
    ADD CONSTRAINT productos_receta_productos_fk FOREIGN KEY ( productos_id_producto )
        REFERENCES productos ( id_producto );

ALTER TABLE productos_receta
    ADD CONSTRAINT productos_receta_receta_fk FOREIGN KEY ( receta_id_receta )
        REFERENCES receta ( id_receta );

ALTER TABLE productos
    ADD CONSTRAINT productos_unidad_medida_fk FOREIGN KEY ( unidad_medida_id_unidad )
        REFERENCES unidad_medida ( id_unidad );

ALTER TABLE reserva
    ADD CONSTRAINT reserva_estado_reserva_fk FOREIGN KEY ( estado_reserva_id_est_reserva )
        REFERENCES estado_reserva ( id_est_reserva );

ALTER TABLE reserva
    ADD CONSTRAINT reserva_mesas_fk FOREIGN KEY ( mesas_id_mesa )
        REFERENCES mesas ( id_mesa );

--============================

-------------------- Procedimientos Yensy -----------------------

CREATE OR REPLACE PROCEDURE SP_CREATE_MESAS
(
    v_id_mesa in NUMBER,
    v_capacidad in NUMBER, 
    v_estado_mesa in NUMBER,
    v_salida out NUMBER
)
AS
BEGIN
  INSERT INTO MESAS VALUES(v_id_mesa,v_capacidad,v_estado_mesa);
  v_salida:=1;
  

EXCEPTION WHEN OTHERS THEN

    v_salida:=0;

END;



CREATE OR REPLACE PROCEDURE SP_R_ESTADO_MESA(estado out SYS_REFCURSOR)
IS 
BEGIN
    open estado for select*from estado_mesa;
END;


CREATE OR REPLACE PROCEDURE SP_READ_MESAS(prc out sys_refcursor)
AS
BEGIN
    OPEN prc for SELECT * FROM MESAS;
END;


create or replace PROCEDURE SP_UPDATE_MESAS(
    v_ID_Mesa in number,
    v_capacidad in number,
    v_id_estado in number,
    v_salida out number)
IS
BEGIN
    UPDATE MESAS SET capacidad=v_capacidad,estado_mesa_id_est_mesa=v_id_estado
    WHERE id_mesa = v_ID_Mesa;
    commit;
    v_salida:=1;
    EXCEPTION
    WHEN OTHERS THEN
    v_salida:=0;
END;


CREATE OR REPLACE PROCEDURE SP_DELETE_MESAS(
    v_ID_Mesa in number,
    v_salida out number)
IS
BEGIN
    DELETE FROM MESAS
    WHERE ID_MESA = v_ID_Mesa;
    if sql%rowcount > 0 then
    v_salida:=1;
    end if;
    commit;
    EXCEPTION
    WHEN OTHERS THEN
    v_salida:=0;
END;

-------------------------------------------
-----Metodo de cambiar estado mesa------
-------------------------------------------

CREATE OR REPLACE PROCEDURE SP_UPDATE_MESA(
    v_id_mesa in number,
    v_id_estado number,
    v_salida out number
)
IS 
BEGIN
    UPDATE MESAS SET estado_mesa_id_est_mesa=v_id_estado
    WHERE id_mesa = v_id_mesa;
    commit;
    v_salida:=1;
    EXCEPTION
    WHEN OTHERS THEN
    v_salida:=0;
END;
-------------------------------------------
-------------Modulo de Bodega--------------
-------------------------------------------
CREATE OR REPLACE PROCEDURE SP_CREATE_PRODUCTOS(
    v_id_prod in NUMBER,
    v_nombre_prod varchar2,
    v_marca_prod varchar2,
    v_proveedor_prod varchar2,
    v_precio_compra number,
    v_ultima_compra number,
    v_salida out number
)
IS 
BEGIN
  INSERT INTO productos
  VALUES(
    v_id_prod,
    v_nombre_prod,
    v_marca_prod ,
    v_proveedor_prod,
    v_precio_compra,
    v_ultima_compra
);
COMMIT;
    v_salida:=1;
EXCEPTION WHEN OTHERS THEN
    v_salida:=0;
END;



-------------------------- Fin procedimientos Yensy ------------------------------


---------- Aqui comienza Cristiancito ----------

create or replace PROCEDURE SP_R_ESTADO_RESERVA(estado out SYS_REFCURSOR)
IS 
BEGIN
    open estado for select * from estado_reserva;
END;



create or replace PROCEDURE SP_LISTAR_RESERVAS(reservas out SYS_REFCURSOR)
IS
BEGIN
    open reservas for
    SELECT r.id_reserva,
    e.DESC_ESTD_RESERVA,
    r.rut_reserva,
    r.fecha_reserva,
    r.email,
    r.telefono_reserva,
    r.cantidad_personas_reserva     
    FROM RESERVA r
    JOIN estado_reserva e
    on r.estado_reserva_id_est_reserva = e.id_est_reserva
    ORDER BY r.id_reserva;
END;



create or replace PROCEDURE SP_AGREGAR_RESERVA(
    v_ID_Reserva number,
    v_ID_Estado_Mesa number,
    v_Rut_Reserva NVARCHAR2,
    v_Fecha_Reserva date,
    v_email VARCHAR2,
    v_telefono_reserva varchar2,
    v_cantidad_personas_reserva number,
    v_salida out number)
IS
BEGIN
    INSERT INTO RESERVA (ID_RESERVA, estado_reserva_id_est_reserva, rut_reserva, fecha_reserva, email, telefono_reserva, cantidad_personas_reserva)
    VALUES(v_ID_Reserva, v_ID_Estado_Mesa, v_Rut_Reserva, v_Fecha_Reserva, v_email, v_telefono_reserva, v_cantidad_personas_reserva);
    commit;
    v_salida:=1;
    EXCEPTION

    WHEN OTHERS THEN
    v_salida:=0;
END;



create or replace PROCEDURE SP_ELIMINAR_RESERVA(
    v_ID_Reserva in number,
    v_salida out number)
IS
BEGIN
    DELETE FROM RESERVA
    WHERE ID_RESERVA = v_ID_RESERVA;
    if sql%rowcount > 0 then
    v_salida:=1;
    end if;
    commit;
    EXCEPTION

    WHEN OTHERS THEN
    v_salida:=0;
END;



create or replace PROCEDURE SP_MODIFICAR_RESERVA(
    v_ID_Reserva number,
    v_ID_Estado_Mesa number,
    v_Rut_Reserva NVARCHAR2,
    v_Fecha_Reserva date,
    v_email VARCHAR2,
    v_telefono_reserva varchar2,
    v_cantidad_personas_reserva number,
    v_salida out number)
IS
BEGIN
    UPDATE RESERVA SET ESTADO_RESERVA_ID_EST_RESERVA = v_ID_Estado_Mesa,
                       RUT_RESERVA = v_Rut_Reserva,
                       FECHA_RESERVA = v_Fecha_Reserva,
                       EMAIL = v_Email,
                       TELEFONO_RESERVA = v_Telefono_Reserva,
                       CANTIDAD_PERSONAS_RESERVA = v_cantidad_personas_reserva
    WHERE id_reserva = v_ID_Reserva;
    commit;
    v_salida:=1;
    EXCEPTION

    WHEN OTHERS THEN
    v_salida:=0;
END;



INSERT INTO ESTADO_RESERVA VALUES(1,'Agendada');
INSERT INTO ESTADO_RESERVA VALUES(2,'Finalizada');
INSERT INTO ESTADO_RESERVA VALUES(3,'Cancelada');

---------- Fin de Cristiancito -----------

INSERT INTO ESTADO_MESA VALUES(1,'Disponible');
INSERT INTO ESTADO_MESA VALUES(2,'En Uso');
INSERT INTO ESTADO_MESA VALUES(3,'Por Limpiar');
INSERT INTO ESTADO_MESA VALUES(4,'Reservada');